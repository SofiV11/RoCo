!1. Как хранить картинки , загружать и отображать (в проекте, в базе)
2. Разобраться с передачей даты (форма добавления и редактирования)
3. Добавить комментарии, написать и удалить (возможно хранить как record, так как они будут неизменяемые)
!4. Добавить использование vaadin
6. Сессии, хранение корзины (в базе, с автоархивацией самых давних данных)
!7. Авторизация, аутентификация (два этапа регистрации, разделение прав доступа)
8. Регистрация пользователей + проверки мейла на интерфейсе, код на емейл, несколько этапов регистрации
9. Разделение прав доступа (стр деьалец новостей, стр блога, стр товаров и деталей)
10. Раздел контактов, как то карту впихнуть
11. генерация фоток в url по наименованию категории товара(менять контроллер)
!12. Процедуры на стороне сервера и их вызов
14. Интерактивчик на главной странице (js)
15. Удалить из похожих постов тот, который сейчас откерыт (дубль списка и drop)
-----
+ Поиск по автору поста
+ Раздел каталог
+ Таблица 1 - ид категории и лейбл, таблица 2 - товары и ид категории в связке
+- Залить проект в гит, разбить по веткам
-----
- immutable ? final 
- mapper https://javarush.com/groups/posts/3698-chto-takoe-mapstruct-i-kak-praviljhno-nastroitjh-ego-dlja-moduljhnogo-testirovanija-v-springboo
- Query https://www.youtube.com/watch?v=6q6WH2RSP6Y
- Collection<? extends GrantedAuthority>
_--------_
Остановилась на создании класса Категорий продукта и связке таблиц https://www.youtube.com/watch?v=-qiRd-eRnUY
Авторизация - https://www.youtube.com/watch?v=XiSXn_q3mgc ....... https://www.youtube.com/watch?v=Ylo4mkqsO4w
-- https://habr.com/ru/articles/680052/
,,,,,,,,,,,,,,,,,,,,,,,,,,
Controller – специальный тип класса, применяемый в MVC приложениях. Похож на обычный сервлет HttpServlet, работающий с объектами HttpServletRequest и HttpServletResponse, но с расширенными возможностями от Spring Framework.
Repository – указывает, что класс используется для задания перечня
необходимых работ по поиску, получению и сохранению данных. Аннотация может использоваться для реализации шаблона DAO.
Service – указывает, что класс является сервисом для реализации бизнес логики.
Configuration – эта аннотация используется для классов, которые определяют bean-компоненты.
Autowired – аннотация позволяет автоматически установить значение поля. Функциональность этой аннотации заключается в том, что нам не нужно заботиться о том, как лучше всего Bean'у передать экземпляр другого Bean'a. Spring сам найдет нужный Bean и подставит его значение в свойство, которое отмечено аннотацией.


остановилась на моменте пароля, авторизации